version: 2.1

parameters:

  releaseGradleFlags:
    type: string
    default: "-PSNAPSHOT=false -PLOCAL_UPLOAD=false -PRELEASE_BUILD_TYPE_ENABLED=true -PRELEASE_FAKE_ENABLED=true -PACCEPT_SNAPSHOT_DEPENDENCIES=false -Dorg.gradle.internal.publish.checksums.insecure=true --stacktrace"

  # API

  api:
    type: boolean
    default: false

  release:
    type: boolean
    default: false

references:

  ## Workspace

  working_dir: &working_dir
    ~/project

orbs:
  ruby: circleci/ruby@1.1.2

executors:
  jdk_executor:
    working_directory: *working_dir
    docker:
      - image: circleci/openjdk:11-jdk
    environment:
      JVM_OPTS: -Xmx3200m
      GRADLE_OPTS: -Dorg.gradle.caching=false -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dorg.gradle.jvmargs="-Xmx4g -Xms1g"
      JAVA_MAX_HEAP_SIZE: 4096m

commands:
  restore_gradle_cache:
    steps:
      - restore_cache:
          keys:
            - v2-gradle_cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ .Branch }}-{{ checksum "buildSrc/src/main/kotlin/Libs.kt" }}-{{ checksum "buildSrc/src/main/kotlin/BuildLibs.kt" }}
            - v2-gradle_cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ .Branch }}
            - v2-gradle_cache-

  save_gradle_cache:
    steps:
      - save_cache:
          key: v2-gradle_cache-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ .Branch }}-{{ checksum "buildSrc/src/main/kotlin/Libs.kt" }}-{{ checksum "buildSrc/src/main/kotlin/BuildLibs.kt" }}
          paths:
            - ~/.gradle

jobs:

  ktlint:
    executor: jdk_executor
    steps:
      - checkout
      - run:
          name: Ktlint
          command: ./gradlew ktlint --stacktrace

  build:
    executor: jdk_executor
    steps:
      - checkout
      - restore_gradle_cache
      - run:
          name: Download dependencies
          command: ./gradlew dependencies --refresh-dependencies --stacktrace
      - save_gradle_cache
      - run:
          name: Assembling
          command: ./gradlew assemble --stacktrace
      - run:
          name: Saving jars
          command: |
            mkdir -p ~/jars/
            find . -type f -regex ".*/build/libs/.*jar" -exec cp {} ~/jars/ \;
          when: always
      - store_artifacts:
          path: ~/jars
          destination: jars

  test:
    executor: jdk_executor
    steps:
      - checkout
      - restore_gradle_cache
      - run:
          name: Test
          command: ./gradlew test --stacktrace
      - run:
          name: Saving test results 
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ./jdroid-gradle-android-plugin/build/reports/tests/test
          destination: jdroid-gradle-android-plugin/tests
      - store_artifacts:
          path: ./jdroid-gradle-commons-plugin/build/reports/tests/test
          destination: jdroid-gradle-commons-plugin/tests
      - store_artifacts:
          path: ./jdroid-gradle-java-plugin/build/reports/tests/test
          destination: jdroid-gradle-java-plugin/tests
      - store_artifacts:
          path: ./jdroid-gradle-java-webapp-plugin/build/reports/tests/test
          destination: jdroid-gradle-java-webapp-plugin/tests
      - store_artifacts:
          path: ./jdroid-gradle-project-plugin/build/reports/tests/test
          destination: jdroid-gradle-project-plugin/tests
      - store_artifacts:
          path: ./jdroid-gradle-root-plugin/build/reports/tests/test
          destination: jdroid-gradle-root-plugin/tests
          
  validatePlugins:
    executor: jdk_executor
    steps:
      - checkout
      - restore_gradle_cache
      # Enable this on Gradle 6
#      - run:
#          name: Validate plugins
#          command: ./gradlew validatePlugins --stacktrace

  security:
    executor: jdk_executor
    steps:
      - checkout
      - restore_gradle_cache
      - run:
          name: Verify the integrity of the Gradle Wrapper JAR
          command: |
            # https://docs.gradle.org/current/userguide/gradle_wrapper.html#wrapper_checksum_verification
            cd gradle/wrapper
            gradleVersion=$(grep "distributionUrl" gradle-wrapper.properties | grep -Po "(\d+\.)+\d+")
            curl --location --output gradle-wrapper.jar.sha256 https://services.gradle.org/distributions/gradle-${gradleVersion}-wrapper.jar.sha256
            echo "  gradle-wrapper.jar" >> gradle-wrapper.jar.sha256
            sha256sum --check gradle-wrapper.jar.sha256

  publish:
    executor: jdk_executor
    steps:
      - checkout
      - restore_gradle_cache
      - run:
          name: Uploading to Nexus Sonatype
          command: ./gradlew publish -PLOCAL_UPLOAD=false --stacktrace

  upgradeDependencies:
    executor: jdk_executor
    steps:
      - checkout
      - run:
          name: Upgrade Dependencies
          command: ./gradlew upgradeDependencies -PpullRequestEnabled=true --refresh-dependencies --stacktrace

  release:
    executor: jdk_executor
    steps:
      - checkout
      - run:
          name: Close GitHub Milestone
          command: ./gradlew closeGitHubMilestone << pipeline.parameters.releaseGradleFlags >>
      - run:
          name: Create GitHub Release
          command: ./gradlew createGitHubRelease << pipeline.parameters.releaseGradleFlags >>
      - ruby/install:
          version: '2.7'
      - run:
          name: Generate Changelog
          command: |
            gem install github_changelog_generator -v 1.13.2
            ./gradlew generateChangelog << pipeline.parameters.releaseGradleFlags >>
      - run:
          name: Publish
          command: ./gradlew publish << pipeline.parameters.releaseGradleFlags >>
#      - run:
#          name: Close and Release Repository
#          command: ./gradlew closeAndReleaseRepository << pipeline.parameters.releaseGradleFlags >>

workflows:
  commit:
    unless: << pipeline.parameters.api >>
    jobs:
      - build
      - ktlint
      - security
      - test:
          requires:
            - build
      - validatePlugins:
          requires:
            - build
      - publish:
          filters:
            branches:
              only:
                - master
                - production
          requires:
            - ktlint
            - test
            - validatePlugins
            - security
  release:
    when: << pipeline.parameters.release >>
    jobs:
      - release

